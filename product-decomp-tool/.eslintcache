[{"/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/index.js":"1","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/App.js":"2","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/reportWebVitals.js":"3","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-1.js":"4","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-2.js":"5","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-3.js":"6","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-4.js":"7","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-5.js":"8","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-6.js":"9","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-8.js":"10","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-7.js":"11","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-9.js":"12"},{"size":500,"mtime":1610845080431,"results":"13","hashOfConfig":"14"},{"size":2080,"mtime":1611197057677,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1609196076327,"results":"16","hashOfConfig":"14"},{"size":6075,"mtime":1611119016691,"results":"17","hashOfConfig":"14"},{"size":6085,"mtime":1611117444436,"results":"18","hashOfConfig":"14"},{"size":6034,"mtime":1611117432954,"results":"19","hashOfConfig":"14"},{"size":6215,"mtime":1611172795972,"results":"20","hashOfConfig":"14"},{"size":6093,"mtime":1611173070230,"results":"21","hashOfConfig":"14"},{"size":6013,"mtime":1611171646718,"results":"22","hashOfConfig":"14"},{"size":6013,"mtime":1611171784957,"results":"23","hashOfConfig":"14"},{"size":6063,"mtime":1611173820360,"results":"24","hashOfConfig":"14"},{"size":6063,"mtime":1611173654886,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1p36x04",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"28"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"28"},"/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/index.js",[],["61","62"],"/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/App.js",["63"],"import React from \"react\";\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Page1 from './components/page-1';\nimport Page2 from './components/page-2';\nimport Page3 from './components/page-3';\nimport Page4 from './components/page-4';\nimport Page5 from './components/page-5';\nimport Page6 from './components/page-6';\nimport Page7 from './components/page-7';\nimport Page8 from './components/page-8';\nimport Page9 from './components/page-9';\n\nclass App extends React.Component {\n  render(){\n\n    const concepts = [\n      {task: 'Selection', route: '/page1'}, \n      {task: 'For-Loops', route: '/page2'},\n      {task: 'While-Loops', route: '/page3'},\n      {task: 'Files', route: '/page4'},\n      {task: 'Methods', route: '/page5'},\n      {task: 'Objects', route: '/page6'},\n      {task: 'Arrays', route: '/page7'},\n      {task: 'Classes', route: '/page8'},\n      {task: 'Recursion', route: '/page9'},\n      ];\n\n    return (\n      \n      <div className=\"app\">\n        <h1> Welcome to the COSC 236 Product Decomposition Tool !</h1>\n        <h3> Please select a concept to get started: </h3>\n\n        <Router> \n          <div className=\"card-container\">\n              {concepts.map((item, index) => {\n              return(\n                <Link to={item.route}> <a className=\"concepts\">{item.task}</a> </Link>   \n                );\n              })}\n          </div>\n          <div> \n            <Switch> \n              <Route path=\"/page1\" component={Page1}/>\n              <Route path=\"/page2\" component={Page2}/>\n              <Route path=\"/page3\" component={Page3}/>\n              <Route path=\"/page4\" component={Page4}/>\n              <Route path=\"/page5\" component={Page5}/>\n              <Route path=\"/page6\" component={Page6}/>\n              <Route path=\"/page7\" component={Page7}/>\n              <Route path=\"/page8\" component={Page8}/>\n              <Route path=\"/page9\" component={Page9}/> \n            </Switch> \n          </div>           \n        </Router>\n      </div>\n      \n    );\n  }\n  \n}\n\nexport default App;\n","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/reportWebVitals.js",[],"/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-1.js",["64"],"import React from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport uuid from \"uuid/v4\";\nimport './page-1.css';\n\nconst tasks = [\n    { id: uuid(), content: \"If conditions are satisfied, go to if block\"},\n    { id: uuid(), content: \"If conditions are not satisfied go to else block\" },\n    { id: uuid(), content: \"Check conditions\"},\n  ];\n\n\n  class Page1 extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        'unordered': {\n          name: \"Unordered Tasks\",\n          items: tasks\n        },\n        'ordered': {\n          name: \"Ordered Tasks\",\n          items: []\n        },\n      };\n    }\n    render(){\n      var onDragEnd = (result, columns)  => {\n  \n        if (!result.destination) return;\n        const { source, destination } = result;\n      \n        // If the draggable is placed in a different column \n        if (source.droppableId !== destination.droppableId) {\n          const sourceColumn = columns[source.droppableId];\n          const destColumn = columns[destination.droppableId];\n          const sourceItems = [...sourceColumn.items];\n          const destItems = [...destColumn.items];\n          const [removed] = sourceItems.splice(source.index, 1);\n          destItems.splice(destination.index, 0, removed);\n  \n          // Set state \n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...sourceColumn,\n              items: sourceItems\n            },\n            [destination.droppableId]: {\n              ...destColumn,\n              items: destItems\n            }\n          })\n      \n        }\n        \n        // Reordering within the same column\n        else {\n          const column = columns[source.droppableId];\n          const copiedItems = [...column.items];\n          const [removed] = copiedItems.splice(source.index, 1);\n          copiedItems.splice(destination.index, 0, removed);\n      \n          // Set state\n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...column,\n              items: copiedItems\n            },\n          })\n        }  \n      }\n  \n      var printC = () => {\n        var modal = document.getElementById(\"modal\");\n        var close = document.getElementById(\"close-btn\");\n        modal.style.display = \"block\";\n  \n        close.onclick = () =>{\n          modal.style.display = \"none\";\n        }\n  \n      }\n  \n      var columns = this.state;\n  \n      return (\n        \n        <div className=\"page-app\">\n          <div className=\"drag-context\">\n            <DragDropContext\n              onDragEnd={(result) => onDragEnd(result, columns)}\n            >\n              {Object.entries(columns).map(([columnId, column], index) => {\n                return (\n                  <div\n                    className=\"column-container\"\n                    key={columnId}\n                  >\n                    <h2 className=\"headers\">{column.name}</h2>\n                    <div style={{ margin: 8 }}>\n                      <Droppable droppableId={columnId} key={columnId}>\n                        {(provided, snapshot) => {\n                          return (\n                            <div\n                              {...provided.droppableProps}\n                              ref={provided.innerRef}\n                              className=\"column\"\n                              style={{\n                                background: snapshot.isDraggingOver\n                                  ? \"#343d52\"\n                                  : \"#01172F\",\n                              }}\n                            >\n                              {column.items.map((item, index) => {\n                                return (\n                                  <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}\n                                  >\n                                    {(provided, snapshot) => {\n                                      return (\n                                        <div\n                                        className=\"task-card\"\n                                          ref={provided.innerRef}\n                                          {...provided.draggableProps}\n                                          {...provided.dragHandleProps}\n                                          style={{\n                                            backgroundColor: snapshot.isDragging\n                                              ? \"#858b97\"\n                                              : \"#00635D\",\n                                            color: \"#b2d8d8\",\n                                            ...provided.draggableProps.style\n                                          }}\n                                        >\n                                          {item.content}\n                                        </div>\n                                      );\n                                    }}\n                                  </Draggable>\n                                );\n                              })}\n                              {provided.placeholder}\n                            </div>\n                          );\n                        }}\n                      </Droppable>\n                    </div>\n                  </div>\n                );\n              })}\n            </DragDropContext>\n              \n            <div id=\"modal\">\n              <div className=\"modal-content\">\n                <span id=\"close-btn\" class=\"close\">&times;</span>\n                <h3> Copy comments below </h3>\n                {this.state.ordered.items.map((item, index) => {\n                  return(\n                    <p> // {item.content}</p>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          <button id=\"btn\" onClick={printC}>Print comments</button>\n        </div>\n        \n      );\n    }\n    \n  }\n\n  export default Page1;","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-2.js",["65"],"import React from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport uuid from \"uuid/v4\";\nimport './page-1.css';\n\nconst tasks = [\n    { id: uuid(), content: \"Check condition\"},\n    { id: uuid(), content: \"Initialize\"},\n    { id: uuid(), content: \"Increment the for loop\" },\n    { id: uuid(), content: \"Execute the body of the for loop\" },\n    \n  ];\n\n\n  class Page2 extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        'unordered': {\n          name: \"Unordered Tasks\",\n          items: tasks\n        },\n        'ordered': {\n          name: \"Ordered Tasks\",\n          items: []\n        },\n      };\n    }\n    render(){\n      var onDragEnd = (result, columns)  => {\n  \n        if (!result.destination) return;\n        const { source, destination } = result;\n      \n        // If the draggable is placed in a different column \n        if (source.droppableId !== destination.droppableId) {\n          const sourceColumn = columns[source.droppableId];\n          const destColumn = columns[destination.droppableId];\n          const sourceItems = [...sourceColumn.items];\n          const destItems = [...destColumn.items];\n          const [removed] = sourceItems.splice(source.index, 1);\n          destItems.splice(destination.index, 0, removed);\n  \n          // Set state \n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...sourceColumn,\n              items: sourceItems\n            },\n            [destination.droppableId]: {\n              ...destColumn,\n              items: destItems\n            }\n          })\n      \n        }\n        \n        // Reordering within the same column\n        else {\n          const column = columns[source.droppableId];\n          const copiedItems = [...column.items];\n          const [removed] = copiedItems.splice(source.index, 1);\n          copiedItems.splice(destination.index, 0, removed);\n      \n          // Set state\n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...column,\n              items: copiedItems\n            },\n          })\n        }  \n      }\n  \n      var printC = () => {\n        var modal = document.getElementById(\"modal\");\n        var close = document.getElementById(\"close-btn\");\n        modal.style.display = \"block\";\n  \n        close.onclick = () =>{\n          modal.style.display = \"none\";\n        }\n  \n      }\n  \n      var columns = this.state;\n  \n      return (\n        \n        <div className=\"page-app\">\n          <div className=\"drag-context\">\n            <DragDropContext\n              onDragEnd={(result) => onDragEnd(result, columns)}\n            >\n              {Object.entries(columns).map(([columnId, column], index) => {\n                return (\n                  <div\n                    className=\"column-container\"\n                    key={columnId}\n                  >\n                    <h2 className=\"headers\">{column.name}</h2>\n                    <div style={{ margin: 8 }}>\n                      <Droppable droppableId={columnId} key={columnId}>\n                        {(provided, snapshot) => {\n                          return (\n                            <div\n                              {...provided.droppableProps}\n                              ref={provided.innerRef}\n                              className=\"column\"\n                              style={{\n                                background: snapshot.isDraggingOver\n                                  ? \"#343d52\"\n                                  : \"#01172F\",\n                              }}\n                            >\n                              {column.items.map((item, index) => {\n                                return (\n                                  <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}\n                                  >\n                                    {(provided, snapshot) => {\n                                      return (\n                                        <div\n                                        className=\"task-card\"\n                                          ref={provided.innerRef}\n                                          {...provided.draggableProps}\n                                          {...provided.dragHandleProps}\n                                          style={{\n                                            backgroundColor: snapshot.isDragging\n                                              ? \"#858b97\"\n                                              : \"#00635D\",\n                                            color: \"#b2d8d8\",\n                                            ...provided.draggableProps.style\n                                          }}\n                                        >\n                                          {item.content}\n                                        </div>\n                                      );\n                                    }}\n                                  </Draggable>\n                                );\n                              })}\n                              {provided.placeholder}\n                            </div>\n                          );\n                        }}\n                      </Droppable>\n                    </div>\n                  </div>\n                );\n              })}\n            </DragDropContext>\n              \n            <div id=\"modal\">\n              <div className=\"modal-content\">\n                <span id=\"close-btn\" class=\"close\">&times;</span>\n                <h3> Copy comments below </h3>\n                {this.state.ordered.items.map((item, index) => {\n                  return(\n                    <p> // {item.content}</p>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          <button id=\"btn\" onClick={printC}>Print comments</button>\n        </div>\n        \n      );\n    }\n    \n  }\n\n  export default Page2;","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-3.js",["66"],"import React from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport uuid from \"uuid/v4\";\nimport './page-1.css';\n\nconst tasks = [\n    { id: uuid(), content: \"Increment in the code body\"},\n    { id: uuid(), content: \"Execute while loop body\"},\n    { id: uuid(), content: \"Test condition\"}\n    \n  ];\n\n\n  class Page3 extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        'unordered': {\n          name: \"Unordered Tasks\",\n          items: tasks\n        },\n        'ordered': {\n          name: \"Ordered Tasks\",\n          items: []\n        },\n      };\n    }\n    render(){\n      var onDragEnd = (result, columns)  => {\n  \n        if (!result.destination) return;\n        const { source, destination } = result;\n      \n        // If the draggable is placed in a different column \n        if (source.droppableId !== destination.droppableId) {\n          const sourceColumn = columns[source.droppableId];\n          const destColumn = columns[destination.droppableId];\n          const sourceItems = [...sourceColumn.items];\n          const destItems = [...destColumn.items];\n          const [removed] = sourceItems.splice(source.index, 1);\n          destItems.splice(destination.index, 0, removed);\n  \n          // Set state \n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...sourceColumn,\n              items: sourceItems\n            },\n            [destination.droppableId]: {\n              ...destColumn,\n              items: destItems\n            }\n          })\n      \n        }\n        \n        // Reordering within the same column\n        else {\n          const column = columns[source.droppableId];\n          const copiedItems = [...column.items];\n          const [removed] = copiedItems.splice(source.index, 1);\n          copiedItems.splice(destination.index, 0, removed);\n      \n          // Set state\n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...column,\n              items: copiedItems\n            },\n          })\n        }  \n      }\n  \n      var printC = () => {\n        var modal = document.getElementById(\"modal\");\n        var close = document.getElementById(\"close-btn\");\n        modal.style.display = \"block\";\n  \n        close.onclick = () =>{\n          modal.style.display = \"none\";\n        }\n  \n      }\n  \n      var columns = this.state;\n  \n      return (\n        \n        <div className=\"page-app\">\n          <div className=\"drag-context\">\n            <DragDropContext\n              onDragEnd={(result) => onDragEnd(result, columns)}\n            >\n              {Object.entries(columns).map(([columnId, column], index) => {\n                return (\n                  <div\n                    className=\"column-container\"\n                    key={columnId}\n                  >\n                    <h2 className=\"headers\">{column.name}</h2>\n                    <div style={{ margin: 8 }}>\n                      <Droppable droppableId={columnId} key={columnId}>\n                        {(provided, snapshot) => {\n                          return (\n                            <div\n                              {...provided.droppableProps}\n                              ref={provided.innerRef}\n                              className=\"column\"\n                              style={{\n                                background: snapshot.isDraggingOver\n                                  ? \"#343d52\"\n                                  : \"#01172F\",\n                              }}\n                            >\n                              {column.items.map((item, index) => {\n                                return (\n                                  <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}\n                                  >\n                                    {(provided, snapshot) => {\n                                      return (\n                                        <div\n                                        className=\"task-card\"\n                                          ref={provided.innerRef}\n                                          {...provided.draggableProps}\n                                          {...provided.dragHandleProps}\n                                          style={{\n                                            backgroundColor: snapshot.isDragging\n                                              ? \"#858b97\"\n                                              : \"#00635D\",\n                                            color: \"#b2d8d8\",\n                                            ...provided.draggableProps.style\n                                          }}\n                                        >\n                                          {item.content}\n                                        </div>\n                                      );\n                                    }}\n                                  </Draggable>\n                                );\n                              })}\n                              {provided.placeholder}\n                            </div>\n                          );\n                        }}\n                      </Droppable>\n                    </div>\n                  </div>\n                );\n              })}\n            </DragDropContext>\n              \n            <div id=\"modal\">\n              <div className=\"modal-content\">\n                <span id=\"close-btn\" class=\"close\">&times;</span>\n                <h3> Copy comments below </h3>\n                {this.state.ordered.items.map((item, index) => {\n                  return(\n                    <p> // {item.content}</p>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          <button id=\"btn\" onClick={printC}>Print comments</button>\n        </div>\n        \n      );\n    }\n    \n  }\n\n  export default Page3;","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-4.js",["67"],"import React from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport uuid from \"uuid/v4\";\nimport './page-1.css';\n\nconst tasks = [\n    { id: uuid(), content: \"Loop through the file\"},\n    { id: uuid(), content: \"Import the java file class\"},\n    { id: uuid(), content: \"Initialize a scanner\"},\n    { id: uuid(), content: \"Import the java scanner class\"},\n    { id: uuid(), content: \"Execute algorithm in the loop\"},\n    { id: uuid(), content: \"Close the scanner\"},\n    \n    \n  ];\n\n\n  class Page4 extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        'unordered': {\n          name: \"Unordered Tasks\",\n          items: tasks\n        },\n        'ordered': {\n          name: \"Ordered Tasks\",\n          items: []\n        },\n      };\n    }\n    render(){\n      var onDragEnd = (result, columns)  => {\n  \n        if (!result.destination) return;\n        const { source, destination } = result;\n      \n        // If the draggable is placed in a different column \n        if (source.droppableId !== destination.droppableId) {\n          const sourceColumn = columns[source.droppableId];\n          const destColumn = columns[destination.droppableId];\n          const sourceItems = [...sourceColumn.items];\n          const destItems = [...destColumn.items];\n          const [removed] = sourceItems.splice(source.index, 1);\n          destItems.splice(destination.index, 0, removed);\n  \n          // Set state \n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...sourceColumn,\n              items: sourceItems\n            },\n            [destination.droppableId]: {\n              ...destColumn,\n              items: destItems\n            }\n          })\n      \n        }\n        \n        // Reordering within the same column\n        else {\n          const column = columns[source.droppableId];\n          const copiedItems = [...column.items];\n          const [removed] = copiedItems.splice(source.index, 1);\n          copiedItems.splice(destination.index, 0, removed);\n      \n          // Set state\n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...column,\n              items: copiedItems\n            },\n          })\n        }  \n      }\n  \n      var printC = () => {\n        var modal = document.getElementById(\"modal\");\n        var close = document.getElementById(\"close-btn\");\n        modal.style.display = \"block\";\n  \n        close.onclick = () =>{\n          modal.style.display = \"none\";\n        }\n  \n      }\n  \n      var columns = this.state;\n  \n      return (\n        \n        <div className=\"page-app\">\n          <div className=\"drag-context\">\n            <DragDropContext\n              onDragEnd={(result) => onDragEnd(result, columns)}\n            >\n              {Object.entries(columns).map(([columnId, column], index) => {\n                return (\n                  <div\n                    className=\"column-container\"\n                    key={columnId}\n                  >\n                    <h2 className=\"headers\">{column.name}</h2>\n                    <div style={{ margin: 8 }}>\n                      <Droppable droppableId={columnId} key={columnId}>\n                        {(provided, snapshot) => {\n                          return (\n                            <div\n                              {...provided.droppableProps}\n                              ref={provided.innerRef}\n                              className=\"column\"\n                              style={{\n                                background: snapshot.isDraggingOver\n                                  ? \"#343d52\"\n                                  : \"#01172F\",\n                              }}\n                            >\n                              {column.items.map((item, index) => {\n                                return (\n                                  <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}\n                                  >\n                                    {(provided, snapshot) => {\n                                      return (\n                                        <div\n                                        className=\"task-card\"\n                                          ref={provided.innerRef}\n                                          {...provided.draggableProps}\n                                          {...provided.dragHandleProps}\n                                          style={{\n                                            backgroundColor: snapshot.isDragging\n                                              ? \"#858b97\"\n                                              : \"#00635D\",\n                                            color: \"#b2d8d8\",\n                                            ...provided.draggableProps.style\n                                          }}\n                                        >\n                                          {item.content}\n                                        </div>\n                                      );\n                                    }}\n                                  </Draggable>\n                                );\n                              })}\n                              {provided.placeholder}\n                            </div>\n                          );\n                        }}\n                      </Droppable>\n                    </div>\n                  </div>\n                );\n              })}\n            </DragDropContext>\n              \n            <div id=\"modal\">\n              <div className=\"modal-content\">\n                <span id=\"close-btn\" class=\"close\">&times;</span>\n                <h3> Copy comments below </h3>\n                {this.state.ordered.items.map((item, index) => {\n                  return(\n                    <p> // {item.content}</p>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          <button id=\"btn\" onClick={printC}>Print comments</button>\n        </div>\n        \n      );\n    }\n    \n  }\n\n  export default Page4;","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-5.js",["68"],"import React from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport uuid from \"uuid/v4\";\nimport './page-1.css';\n\nconst tasks = [\n    { id: uuid(), content: \"Call the method\"},\n    { id: uuid(), content: \"Compose the algorithm within the method\"},\n    { id: uuid(), content: \"Declare method with the name, return type, and necessary parameters\"},\n    \n  ];\n\n\n  class Page5 extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        'unordered': {\n          name: \"Unordered Tasks\",\n          items: tasks\n        },\n        'ordered': {\n          name: \"Ordered Tasks\",\n          items: []\n        },\n      };\n    }\n    render(){\n      var onDragEnd = (result, columns)  => {\n  \n        if (!result.destination) return;\n        const { source, destination } = result;\n      \n        // If the draggable is placed in a different column \n        if (source.droppableId !== destination.droppableId) {\n          const sourceColumn = columns[source.droppableId];\n          const destColumn = columns[destination.droppableId];\n          const sourceItems = [...sourceColumn.items];\n          const destItems = [...destColumn.items];\n          const [removed] = sourceItems.splice(source.index, 1);\n          destItems.splice(destination.index, 0, removed);\n  \n          // Set state \n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...sourceColumn,\n              items: sourceItems\n            },\n            [destination.droppableId]: {\n              ...destColumn,\n              items: destItems\n            }\n          })\n      \n        }\n        \n        // Reordering within the same column\n        else {\n          const column = columns[source.droppableId];\n          const copiedItems = [...column.items];\n          const [removed] = copiedItems.splice(source.index, 1);\n          copiedItems.splice(destination.index, 0, removed);\n      \n          // Set state\n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...column,\n              items: copiedItems\n            },\n          })\n        }  \n      }\n  \n      var printC = () => {\n        var modal = document.getElementById(\"modal\");\n        var close = document.getElementById(\"close-btn\");\n        modal.style.display = \"block\";\n  \n        close.onclick = () =>{\n          modal.style.display = \"none\";\n        }\n  \n      }\n  \n      var columns = this.state;\n  \n      return (\n        \n        <div className=\"page-app\">\n          <div className=\"drag-context\">\n            <DragDropContext\n              onDragEnd={(result) => onDragEnd(result, columns)}\n            >\n              {Object.entries(columns).map(([columnId, column], index) => {\n                return (\n                  <div\n                    className=\"column-container\"\n                    key={columnId}\n                  >\n                    <h2 className=\"headers\">{column.name}</h2>\n                    <div style={{ margin: 8 }}>\n                      <Droppable droppableId={columnId} key={columnId}>\n                        {(provided, snapshot) => {\n                          return (\n                            <div\n                              {...provided.droppableProps}\n                              ref={provided.innerRef}\n                              className=\"column\"\n                              style={{\n                                background: snapshot.isDraggingOver\n                                  ? \"#343d52\"\n                                  : \"#01172F\",\n                              }}\n                            >\n                              {column.items.map((item, index) => {\n                                return (\n                                  <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}\n                                  >\n                                    {(provided, snapshot) => {\n                                      return (\n                                        <div\n                                        className=\"task-card\"\n                                          ref={provided.innerRef}\n                                          {...provided.draggableProps}\n                                          {...provided.dragHandleProps}\n                                          style={{\n                                            backgroundColor: snapshot.isDragging\n                                              ? \"#858b97\"\n                                              : \"#00635D\",\n                                            color: \"#b2d8d8\",\n                                            ...provided.draggableProps.style\n                                          }}\n                                        >\n                                          {item.content}\n                                        </div>\n                                      );\n                                    }}\n                                  </Draggable>\n                                );\n                              })}\n                              {provided.placeholder}\n                            </div>\n                          );\n                        }}\n                      </Droppable>\n                    </div>\n                  </div>\n                );\n              })}\n            </DragDropContext>\n              \n            <div id=\"modal\">\n              <div className=\"modal-content\">\n                <span id=\"close-btn\" class=\"close\">&times;</span>\n                <h3> Copy comments below </h3>\n                {this.state.ordered.items.map((item, index) => {\n                  return(\n                    <p> // {item.content}</p>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          <button id=\"btn\" onClick={printC}>Print comments</button>\n        </div>\n        \n      );\n    }\n    \n  }\n\n  export default Page5;","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-6.js",["69"],"import React from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport uuid from \"uuid/v4\";\nimport './page-1.css';\n\nconst tasks = [\n    { id: uuid(), content: \"Objects task 1\"},\n    { id: uuid(), content: \"Objects task 2\"},\n    { id: uuid(), content: \"Objects task 3\"}\n    \n  ];\n\n\n  class Page6 extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        'unordered': {\n          name: \"Unordered Tasks\",\n          items: tasks\n        },\n        'ordered': {\n          name: \"Ordered Tasks\",\n          items: []\n        },\n      };\n    }\n    render(){\n      var onDragEnd = (result, columns)  => {\n  \n        if (!result.destination) return;\n        const { source, destination } = result;\n      \n        // If the draggable is placed in a different column \n        if (source.droppableId !== destination.droppableId) {\n          const sourceColumn = columns[source.droppableId];\n          const destColumn = columns[destination.droppableId];\n          const sourceItems = [...sourceColumn.items];\n          const destItems = [...destColumn.items];\n          const [removed] = sourceItems.splice(source.index, 1);\n          destItems.splice(destination.index, 0, removed);\n  \n          // Set state \n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...sourceColumn,\n              items: sourceItems\n            },\n            [destination.droppableId]: {\n              ...destColumn,\n              items: destItems\n            }\n          })\n      \n        }\n        \n        // Reordering within the same column\n        else {\n          const column = columns[source.droppableId];\n          const copiedItems = [...column.items];\n          const [removed] = copiedItems.splice(source.index, 1);\n          copiedItems.splice(destination.index, 0, removed);\n      \n          // Set state\n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...column,\n              items: copiedItems\n            },\n          })\n        }  \n      }\n  \n      var printC = () => {\n        var modal = document.getElementById(\"modal\");\n        var close = document.getElementById(\"close-btn\");\n        modal.style.display = \"block\";\n  \n        close.onclick = () =>{\n          modal.style.display = \"none\";\n        }\n  \n      }\n  \n      var columns = this.state;\n  \n      return (\n        \n        <div className=\"page-app\">\n          <div className=\"drag-context\">\n            <DragDropContext\n              onDragEnd={(result) => onDragEnd(result, columns)}\n            >\n              {Object.entries(columns).map(([columnId, column], index) => {\n                return (\n                  <div\n                    className=\"column-container\"\n                    key={columnId}\n                  >\n                    <h2 className=\"headers\">{column.name}</h2>\n                    <div style={{ margin: 8 }}>\n                      <Droppable droppableId={columnId} key={columnId}>\n                        {(provided, snapshot) => {\n                          return (\n                            <div\n                              {...provided.droppableProps}\n                              ref={provided.innerRef}\n                              className=\"column\"\n                              style={{\n                                background: snapshot.isDraggingOver\n                                  ? \"#343d52\"\n                                  : \"#01172F\",\n                              }}\n                            >\n                              {column.items.map((item, index) => {\n                                return (\n                                  <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}\n                                  >\n                                    {(provided, snapshot) => {\n                                      return (\n                                        <div\n                                        className=\"task-card\"\n                                          ref={provided.innerRef}\n                                          {...provided.draggableProps}\n                                          {...provided.dragHandleProps}\n                                          style={{\n                                            backgroundColor: snapshot.isDragging\n                                              ? \"#858b97\"\n                                              : \"#00635D\",\n                                            color: \"#b2d8d8\",\n                                            ...provided.draggableProps.style\n                                          }}\n                                        >\n                                          {item.content}\n                                        </div>\n                                      );\n                                    }}\n                                  </Draggable>\n                                );\n                              })}\n                              {provided.placeholder}\n                            </div>\n                          );\n                        }}\n                      </Droppable>\n                    </div>\n                  </div>\n                );\n              })}\n            </DragDropContext>\n              \n            <div id=\"modal\">\n              <div className=\"modal-content\">\n                <span id=\"close-btn\" class=\"close\">&times;</span>\n                <h3> Copy comments below </h3>\n                {this.state.ordered.items.map((item, index) => {\n                  return(\n                    <p> // {item.content}</p>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          <button id=\"btn\" onClick={printC}>Print comments</button>\n        </div>\n        \n      );\n    }\n    \n  }\n\n  export default Page6;","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-8.js",["70"],"import React from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport uuid from \"uuid/v4\";\nimport './page-1.css';\n\nconst tasks = [\n    { id: uuid(), content: \"Classes task 1\"},\n    { id: uuid(), content: \"Classes task 2\"},\n    { id: uuid(), content: \"Classes task 3\"}\n    \n  ];\n\n\n  class Page8 extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        'unordered': {\n          name: \"Unordered Tasks\",\n          items: tasks\n        },\n        'ordered': {\n          name: \"Ordered Tasks\",\n          items: []\n        },\n      };\n    }\n    render(){\n      var onDragEnd = (result, columns)  => {\n  \n        if (!result.destination) return;\n        const { source, destination } = result;\n      \n        // If the draggable is placed in a different column \n        if (source.droppableId !== destination.droppableId) {\n          const sourceColumn = columns[source.droppableId];\n          const destColumn = columns[destination.droppableId];\n          const sourceItems = [...sourceColumn.items];\n          const destItems = [...destColumn.items];\n          const [removed] = sourceItems.splice(source.index, 1);\n          destItems.splice(destination.index, 0, removed);\n  \n          // Set state \n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...sourceColumn,\n              items: sourceItems\n            },\n            [destination.droppableId]: {\n              ...destColumn,\n              items: destItems\n            }\n          })\n      \n        }\n        \n        // Reordering within the same column\n        else {\n          const column = columns[source.droppableId];\n          const copiedItems = [...column.items];\n          const [removed] = copiedItems.splice(source.index, 1);\n          copiedItems.splice(destination.index, 0, removed);\n      \n          // Set state\n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...column,\n              items: copiedItems\n            },\n          })\n        }  \n      }\n  \n      var printC = () => {\n        var modal = document.getElementById(\"modal\");\n        var close = document.getElementById(\"close-btn\");\n        modal.style.display = \"block\";\n  \n        close.onclick = () =>{\n          modal.style.display = \"none\";\n        }\n  \n      }\n  \n      var columns = this.state;\n  \n      return (\n        \n        <div className=\"page-app\">\n          <div className=\"drag-context\">\n            <DragDropContext\n              onDragEnd={(result) => onDragEnd(result, columns)}\n            >\n              {Object.entries(columns).map(([columnId, column], index) => {\n                return (\n                  <div\n                    className=\"column-container\"\n                    key={columnId}\n                  >\n                    <h2 className=\"headers\">{column.name}</h2>\n                    <div style={{ margin: 8 }}>\n                      <Droppable droppableId={columnId} key={columnId}>\n                        {(provided, snapshot) => {\n                          return (\n                            <div\n                              {...provided.droppableProps}\n                              ref={provided.innerRef}\n                              className=\"column\"\n                              style={{\n                                background: snapshot.isDraggingOver\n                                  ? \"#343d52\"\n                                  : \"#01172F\",\n                              }}\n                            >\n                              {column.items.map((item, index) => {\n                                return (\n                                  <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}\n                                  >\n                                    {(provided, snapshot) => {\n                                      return (\n                                        <div\n                                        className=\"task-card\"\n                                          ref={provided.innerRef}\n                                          {...provided.draggableProps}\n                                          {...provided.dragHandleProps}\n                                          style={{\n                                            backgroundColor: snapshot.isDragging\n                                              ? \"#858b97\"\n                                              : \"#00635D\",\n                                            color: \"#b2d8d8\",\n                                            ...provided.draggableProps.style\n                                          }}\n                                        >\n                                          {item.content}\n                                        </div>\n                                      );\n                                    }}\n                                  </Draggable>\n                                );\n                              })}\n                              {provided.placeholder}\n                            </div>\n                          );\n                        }}\n                      </Droppable>\n                    </div>\n                  </div>\n                );\n              })}\n            </DragDropContext>\n              \n            <div id=\"modal\">\n              <div className=\"modal-content\">\n                <span id=\"close-btn\" class=\"close\">&times;</span>\n                <h3> Copy comments below </h3>\n                {this.state.ordered.items.map((item, index) => {\n                  return(\n                    <p> // {item.content}</p>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          <button id=\"btn\" onClick={printC}>Print comments</button>\n        </div>\n        \n      );\n    }\n    \n  }\n\n  export default Page8;","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-7.js",["71"],"import React from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport uuid from \"uuid/v4\";\nimport './page-1.css';\n\nconst tasks = [\n    { id: uuid(), content: \"Declare a name for the array\"},\n    { id: uuid(), content: \"Define the data type of an array\"},\n    { id: uuid(), content: \"Initialize the size of the array\"}\n    \n  ];\n\n\n  class Page7 extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        'unordered': {\n          name: \"Unordered Tasks\",\n          items: tasks\n        },\n        'ordered': {\n          name: \"Ordered Tasks\",\n          items: []\n        },\n      };\n    }\n    render(){\n      var onDragEnd = (result, columns)  => {\n  \n        if (!result.destination) return;\n        const { source, destination } = result;\n      \n        // If the draggable is placed in a different column \n        if (source.droppableId !== destination.droppableId) {\n          const sourceColumn = columns[source.droppableId];\n          const destColumn = columns[destination.droppableId];\n          const sourceItems = [...sourceColumn.items];\n          const destItems = [...destColumn.items];\n          const [removed] = sourceItems.splice(source.index, 1);\n          destItems.splice(destination.index, 0, removed);\n  \n          // Set state \n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...sourceColumn,\n              items: sourceItems\n            },\n            [destination.droppableId]: {\n              ...destColumn,\n              items: destItems\n            }\n          })\n      \n        }\n        \n        // Reordering within the same column\n        else {\n          const column = columns[source.droppableId];\n          const copiedItems = [...column.items];\n          const [removed] = copiedItems.splice(source.index, 1);\n          copiedItems.splice(destination.index, 0, removed);\n      \n          // Set state\n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...column,\n              items: copiedItems\n            },\n          })\n        }  \n      }\n  \n      var printC = () => {\n        var modal = document.getElementById(\"modal\");\n        var close = document.getElementById(\"close-btn\");\n        modal.style.display = \"block\";\n  \n        close.onclick = () =>{\n          modal.style.display = \"none\";\n        }\n  \n      }\n  \n      var columns = this.state;\n  \n      return (\n        \n        <div className=\"page-app\">\n          <div className=\"drag-context\">\n            <DragDropContext\n              onDragEnd={(result) => onDragEnd(result, columns)}\n            >\n              {Object.entries(columns).map(([columnId, column], index) => {\n                return (\n                  <div\n                    className=\"column-container\"\n                    key={columnId}\n                  >\n                    <h2 className=\"headers\">{column.name}</h2>\n                    <div style={{ margin: 8 }}>\n                      <Droppable droppableId={columnId} key={columnId}>\n                        {(provided, snapshot) => {\n                          return (\n                            <div\n                              {...provided.droppableProps}\n                              ref={provided.innerRef}\n                              className=\"column\"\n                              style={{\n                                background: snapshot.isDraggingOver\n                                  ? \"#343d52\"\n                                  : \"#01172F\",\n                              }}\n                            >\n                              {column.items.map((item, index) => {\n                                return (\n                                  <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}\n                                  >\n                                    {(provided, snapshot) => {\n                                      return (\n                                        <div\n                                        className=\"task-card\"\n                                          ref={provided.innerRef}\n                                          {...provided.draggableProps}\n                                          {...provided.dragHandleProps}\n                                          style={{\n                                            backgroundColor: snapshot.isDragging\n                                              ? \"#858b97\"\n                                              : \"#00635D\",\n                                            color: \"#b2d8d8\",\n                                            ...provided.draggableProps.style\n                                          }}\n                                        >\n                                          {item.content}\n                                        </div>\n                                      );\n                                    }}\n                                  </Draggable>\n                                );\n                              })}\n                              {provided.placeholder}\n                            </div>\n                          );\n                        }}\n                      </Droppable>\n                    </div>\n                  </div>\n                );\n              })}\n            </DragDropContext>\n              \n            <div id=\"modal\">\n              <div className=\"modal-content\">\n                <span id=\"close-btn\" class=\"close\">&times;</span>\n                <h3> Copy comments below </h3>\n                {this.state.ordered.items.map((item, index) => {\n                  return(\n                    <p> // {item.content}</p>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          <button id=\"btn\" onClick={printC}>Print comments</button>\n        </div>\n        \n      );\n    }\n    \n  }\n\n  export default Page7;","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-9.js",["72"],"import React from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport uuid from \"uuid/v4\";\nimport './page-1.css';\n\nconst tasks = [\n    { id: uuid(), content: \"Declare recursion method\"},\n    { id: uuid(), content: \"Define additional condition(s) that calls itself\"},\n    { id: uuid(), content: \"Define the base case\"}\n    \n  ];\n\n\n  class Page9 extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        'unordered': {\n          name: \"Unordered Tasks\",\n          items: tasks\n        },\n        'ordered': {\n          name: \"Ordered Tasks\",\n          items: []\n        },\n      };\n    }\n    render(){\n      var onDragEnd = (result, columns)  => {\n  \n        if (!result.destination) return;\n        const { source, destination } = result;\n      \n        // If the draggable is placed in a different column \n        if (source.droppableId !== destination.droppableId) {\n          const sourceColumn = columns[source.droppableId];\n          const destColumn = columns[destination.droppableId];\n          const sourceItems = [...sourceColumn.items];\n          const destItems = [...destColumn.items];\n          const [removed] = sourceItems.splice(source.index, 1);\n          destItems.splice(destination.index, 0, removed);\n  \n          // Set state \n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...sourceColumn,\n              items: sourceItems\n            },\n            [destination.droppableId]: {\n              ...destColumn,\n              items: destItems\n            }\n          })\n      \n        }\n        \n        // Reordering within the same column\n        else {\n          const column = columns[source.droppableId];\n          const copiedItems = [...column.items];\n          const [removed] = copiedItems.splice(source.index, 1);\n          copiedItems.splice(destination.index, 0, removed);\n      \n          // Set state\n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...column,\n              items: copiedItems\n            },\n          })\n        }  \n      }\n  \n      var printC = () => {\n        var modal = document.getElementById(\"modal\");\n        var close = document.getElementById(\"close-btn\");\n        modal.style.display = \"block\";\n  \n        close.onclick = () =>{\n          modal.style.display = \"none\";\n        }\n  \n      }\n  \n      var columns = this.state;\n  \n      return (\n        \n        <div className=\"page-app\">\n          <div className=\"drag-context\">\n            <DragDropContext\n              onDragEnd={(result) => onDragEnd(result, columns)}\n            >\n              {Object.entries(columns).map(([columnId, column], index) => {\n                return (\n                  <div\n                    className=\"column-container\"\n                    key={columnId}\n                  >\n                    <h2 className=\"headers\">{column.name}</h2>\n                    <div style={{ margin: 8 }}>\n                      <Droppable droppableId={columnId} key={columnId}>\n                        {(provided, snapshot) => {\n                          return (\n                            <div\n                              {...provided.droppableProps}\n                              ref={provided.innerRef}\n                              className=\"column\"\n                              style={{\n                                background: snapshot.isDraggingOver\n                                  ? \"#343d52\"\n                                  : \"#01172F\",\n                              }}\n                            >\n                              {column.items.map((item, index) => {\n                                return (\n                                  <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}\n                                  >\n                                    {(provided, snapshot) => {\n                                      return (\n                                        <div\n                                        className=\"task-card\"\n                                          ref={provided.innerRef}\n                                          {...provided.draggableProps}\n                                          {...provided.dragHandleProps}\n                                          style={{\n                                            backgroundColor: snapshot.isDragging\n                                              ? \"#858b97\"\n                                              : \"#00635D\",\n                                            color: \"#b2d8d8\",\n                                            ...provided.draggableProps.style\n                                          }}\n                                        >\n                                          {item.content}\n                                        </div>\n                                      );\n                                    }}\n                                  </Draggable>\n                                );\n                              })}\n                              {provided.placeholder}\n                            </div>\n                          );\n                        }}\n                      </Droppable>\n                    </div>\n                  </div>\n                );\n              })}\n            </DragDropContext>\n              \n            <div id=\"modal\">\n              <div className=\"modal-content\">\n                <span id=\"close-btn\" class=\"close\">&times;</span>\n                <h3> Copy comments below </h3>\n                {this.state.ordered.items.map((item, index) => {\n                  return(\n                    <p> // {item.content}</p>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          <button id=\"btn\" onClick={printC}>Print comments</button>\n        </div>\n        \n      );\n    }\n    \n  }\n\n  export default Page9;",{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":39,"column":40,"nodeType":"79","endLine":39,"endColumn":64},{"ruleId":"80","severity":1,"message":"81","line":162,"column":24,"nodeType":"82","endLine":162,"endColumn":28},{"ruleId":"80","severity":1,"message":"81","line":164,"column":24,"nodeType":"82","endLine":164,"endColumn":28},{"ruleId":"80","severity":1,"message":"81","line":163,"column":24,"nodeType":"82","endLine":163,"endColumn":28},{"ruleId":"80","severity":1,"message":"81","line":167,"column":24,"nodeType":"82","endLine":167,"endColumn":28},{"ruleId":"80","severity":1,"message":"81","line":163,"column":24,"nodeType":"82","endLine":163,"endColumn":28},{"ruleId":"80","severity":1,"message":"81","line":163,"column":24,"nodeType":"82","endLine":163,"endColumn":28},{"ruleId":"80","severity":1,"message":"81","line":163,"column":24,"nodeType":"82","endLine":163,"endColumn":28},{"ruleId":"80","severity":1,"message":"81","line":163,"column":24,"nodeType":"82","endLine":163,"endColumn":28},{"ruleId":"80","severity":1,"message":"81","line":163,"column":24,"nodeType":"82","endLine":163,"endColumn":28},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","no-global-assign","no-unsafe-negation"]