[{"/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/index.js":"1","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/App.js":"2","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/reportWebVitals.js":"3","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-1.js":"4","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-2.js":"5"},{"size":500,"mtime":1610845080431,"results":"6","hashOfConfig":"7"},{"size":1521,"mtime":1611115854964,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1609196076327,"results":"9","hashOfConfig":"7"},{"size":6075,"mtime":1611115538399,"results":"10","hashOfConfig":"7"},{"size":5986,"mtime":1611115541769,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1p36x04",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"14"},"/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/index.js",[],["26","27"],"/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/App.js",["28","29"],"import React from \"react\";\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport Page1 from './components/page-1';\nimport Page2 from './components/page-2';\n\nclass App extends React.Component {\n  render(){\n\n    const concepts = [\n      {task: 'Selection', route: '/page1'}, \n      {task: 'For-Loops', route: '/page2'},\n      {task: 'While-Loops', route: '/page3'},\n      {task: 'Files', route: '/page4'},\n      {task: 'Methods', route: '/page5'},\n      {task: 'Objects', route: '/page6'},\n      {task: 'Arrays', route: '/route7'},\n      {task: 'Classes', route: '/route8'},\n      {task: 'Recursion', route: '/route9'},\n      ];\n\n    return (\n      \n      <div className=\"app\">\n        <h1> Welcome to the COSC236 Product Decomposition Tool!</h1>\n        <h3> Please select a concept to get started: </h3>\n\n        <Router> \n          \n          \n          <div className=\"card-container\">\n              {concepts.map((item, index) => {\n              return(\n                <Link to={item.route}> <a className=\"concepts\">{item.task}</a> </Link>   \n                );\n              })}\n          </div>\n          <div> \n            <Switch>\n              <Route exact path=\"/\" component={App}/>\n              <Route path=\"/page1\" component={Page1}/>\n              <Route path=\"/page2\" component={Page2}/>\n            </Switch> \n          </div>           \n        </Router>\n\n        \n        \n        \n      </div>\n      \n    );\n  }\n  \n}\n\nexport default App;\n","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/reportWebVitals.js",[],"/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-1.js",["30"],"import React from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport uuid from \"uuid/v4\";\nimport './page-1.css';\n\nconst tasks = [\n    { id: uuid(), content: \"Check conditions\"},\n    { id: uuid(), content: \"If conditions are satisfied, go to if block\"},\n    { id: uuid(), content: \"If conditions are not satisfied go to else block\" },\n  ];\n\n\n  class Page1 extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        'unordered': {\n          name: \"Unordered Tasks\",\n          items: tasks\n        },\n        'ordered': {\n          name: \"Ordered Tasks\",\n          items: []\n        },\n      };\n    }\n    render(){\n      var onDragEnd = (result, columns)  => {\n  \n        if (!result.destination) return;\n        const { source, destination } = result;\n      \n        // If the draggable is placed in a different column \n        if (source.droppableId !== destination.droppableId) {\n          const sourceColumn = columns[source.droppableId];\n          const destColumn = columns[destination.droppableId];\n          const sourceItems = [...sourceColumn.items];\n          const destItems = [...destColumn.items];\n          const [removed] = sourceItems.splice(source.index, 1);\n          destItems.splice(destination.index, 0, removed);\n  \n          // Set state \n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...sourceColumn,\n              items: sourceItems\n            },\n            [destination.droppableId]: {\n              ...destColumn,\n              items: destItems\n            }\n          })\n      \n        }\n        \n        // Reordering within the same column\n        else {\n          const column = columns[source.droppableId];\n          const copiedItems = [...column.items];\n          const [removed] = copiedItems.splice(source.index, 1);\n          copiedItems.splice(destination.index, 0, removed);\n      \n          // Set state\n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...column,\n              items: copiedItems\n            },\n          })\n        }  \n      }\n  \n      var printC = () => {\n        var modal = document.getElementById(\"modal\");\n        var close = document.getElementById(\"close-btn\");\n        modal.style.display = \"block\";\n  \n        close.onclick = () =>{\n          modal.style.display = \"none\";\n        }\n  \n      }\n  \n      var columns = this.state;\n  \n      return (\n        \n        <div className=\"page-app\">\n          <div className=\"drag-context\">\n            <DragDropContext\n              onDragEnd={(result) => onDragEnd(result, columns)}\n            >\n              {Object.entries(columns).map(([columnId, column], index) => {\n                return (\n                  <div\n                    className=\"column-container\"\n                    key={columnId}\n                  >\n                    <h2 className=\"headers\">{column.name}</h2>\n                    <div style={{ margin: 8 }}>\n                      <Droppable droppableId={columnId} key={columnId}>\n                        {(provided, snapshot) => {\n                          return (\n                            <div\n                              {...provided.droppableProps}\n                              ref={provided.innerRef}\n                              className=\"column\"\n                              style={{\n                                background: snapshot.isDraggingOver\n                                  ? \"#343d52\"\n                                  : \"#01172F\",\n                              }}\n                            >\n                              {column.items.map((item, index) => {\n                                return (\n                                  <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}\n                                  >\n                                    {(provided, snapshot) => {\n                                      return (\n                                        <div\n                                        className=\"task-card\"\n                                          ref={provided.innerRef}\n                                          {...provided.draggableProps}\n                                          {...provided.dragHandleProps}\n                                          style={{\n                                            backgroundColor: snapshot.isDragging\n                                              ? \"#858b97\"\n                                              : \"#00635D\",\n                                            color: \"#b2d8d8\",\n                                            ...provided.draggableProps.style\n                                          }}\n                                        >\n                                          {item.content}\n                                        </div>\n                                      );\n                                    }}\n                                  </Draggable>\n                                );\n                              })}\n                              {provided.placeholder}\n                            </div>\n                          );\n                        }}\n                      </Droppable>\n                    </div>\n                  </div>\n                );\n              })}\n            </DragDropContext>\n              \n            <div id=\"modal\">\n              <div className=\"modal-content\">\n                <span id=\"close-btn\" class=\"close\">&times;</span>\n                <h3> Copy comments below </h3>\n                {this.state.ordered.items.map((item, index) => {\n                  return(\n                    <p> // {item.content}</p>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          <button id=\"btn\" onClick={printC}>Print comments</button>\n        </div>\n        \n      );\n    }\n    \n  }\n\n  export default Page1;","/Users/mamadoucoulibaly/Desktop/TA Files - COSC 236/ProductDecompTool/product-decomp-tool/src/components/page-2.js",["31"],"import React from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport uuid from \"uuid/v4\";\nimport './page-1.css';\n\nconst tasks = [\n    { id: uuid(), content: \"Task 1\"},\n    { id: uuid(), content: \"Task 2\"},\n    { id: uuid(), content: \"Task 3\" },\n  ];\n\n\n  class Page1 extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        'unordered': {\n          name: \"Unordered Tasks\",\n          items: tasks\n        },\n        'ordered': {\n          name: \"Ordered Tasks\",\n          items: []\n        },\n      };\n    }\n    render(){\n      var onDragEnd = (result, columns)  => {\n  \n        if (!result.destination) return;\n        const { source, destination } = result;\n      \n        // If the draggable is placed in a different column \n        if (source.droppableId !== destination.droppableId) {\n          const sourceColumn = columns[source.droppableId];\n          const destColumn = columns[destination.droppableId];\n          const sourceItems = [...sourceColumn.items];\n          const destItems = [...destColumn.items];\n          const [removed] = sourceItems.splice(source.index, 1);\n          destItems.splice(destination.index, 0, removed);\n  \n          // Set state \n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...sourceColumn,\n              items: sourceItems\n            },\n            [destination.droppableId]: {\n              ...destColumn,\n              items: destItems\n            }\n          })\n      \n        }\n        \n        // Reordering within the same column\n        else {\n          const column = columns[source.droppableId];\n          const copiedItems = [...column.items];\n          const [removed] = copiedItems.splice(source.index, 1);\n          copiedItems.splice(destination.index, 0, removed);\n      \n          // Set state\n          this.setState({\n            ...columns,\n            [source.droppableId]: {\n              ...column,\n              items: copiedItems\n            },\n          })\n        }  \n      }\n  \n      var printC = () => {\n        var modal = document.getElementById(\"modal\");\n        var close = document.getElementById(\"close-btn\");\n        modal.style.display = \"block\";\n  \n        close.onclick = () =>{\n          modal.style.display = \"none\";\n        }\n  \n      }\n  \n      var columns = this.state;\n  \n      return (\n        \n        <div className=\"page-app\">\n          <div className=\"drag-context\">\n            <DragDropContext\n              onDragEnd={(result) => onDragEnd(result, columns)}\n            >\n              {Object.entries(columns).map(([columnId, column], index) => {\n                return (\n                  <div\n                    className=\"column-container\"\n                    key={columnId}\n                  >\n                    <h2 className=\"headers\">{column.name}</h2>\n                    <div style={{ margin: 8 }}>\n                      <Droppable droppableId={columnId} key={columnId}>\n                        {(provided, snapshot) => {\n                          return (\n                            <div\n                              {...provided.droppableProps}\n                              ref={provided.innerRef}\n                              className=\"column\"\n                              style={{\n                                background: snapshot.isDraggingOver\n                                  ? \"#343d52\"\n                                  : \"#01172F\",\n                              }}\n                            >\n                              {column.items.map((item, index) => {\n                                return (\n                                  <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}\n                                  >\n                                    {(provided, snapshot) => {\n                                      return (\n                                        <div\n                                        className=\"task-card\"\n                                          ref={provided.innerRef}\n                                          {...provided.draggableProps}\n                                          {...provided.dragHandleProps}\n                                          style={{\n                                            backgroundColor: snapshot.isDragging\n                                              ? \"#858b97\"\n                                              : \"#00635D\",\n                                            color: \"#b2d8d8\",\n                                            ...provided.draggableProps.style\n                                          }}\n                                        >\n                                          {item.content}\n                                        </div>\n                                      );\n                                    }}\n                                  </Draggable>\n                                );\n                              })}\n                              {provided.placeholder}\n                            </div>\n                          );\n                        }}\n                      </Droppable>\n                    </div>\n                  </div>\n                );\n              })}\n            </DragDropContext>\n              \n            <div id=\"modal\">\n              <div className=\"modal-content\">\n                <span id=\"close-btn\" class=\"close\">&times;</span>\n                <h3> Copy comments below </h3>\n                {this.state.ordered.items.map((item, index) => {\n                  return(\n                    <p> // {item.content}</p>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          <button id=\"btn\" onClick={printC}>Print comments</button>\n        </div>\n        \n      );\n    }\n    \n  }\n\n  export default Page1;",{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":3,"column":56,"nodeType":"38","messageId":"39","endLine":3,"endColumn":64},{"ruleId":"40","severity":1,"message":"41","line":34,"column":40,"nodeType":"42","endLine":34,"endColumn":64},{"ruleId":"43","severity":1,"message":"44","line":162,"column":24,"nodeType":"45","endLine":162,"endColumn":28},{"ruleId":"43","severity":1,"message":"44","line":162,"column":24,"nodeType":"45","endLine":162,"endColumn":28},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","no-global-assign","no-unsafe-negation"]